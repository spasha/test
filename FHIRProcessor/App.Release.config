<?xml version="1.0" encoding="utf-8"?>
<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
  <connectionStrings>
    <add name="ConfigConnection" connectionString="Data Source={#DatabaseServerName#};Initial Catalog={#DatabaseName#};Integrated Security=True;Encrypt=yes;trustServerCertificate=Yes;" providerName="System.Data.SqlClient" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
    <add name="EdiFhirEntities" connectionString="metadata=res://*/EdiFhirModel.csdl|res://*/EdiFhirModel.ssdl|res://*/EdiFhirModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source={#DatabaseServerName#};initial catalog={#DatabaseName#};integrated security=True;multipleactiveresultsets=True;encrypt=True;application name=EntityFramework&quot;" providerName="System.Data.EntityClient" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
    <add name="SqlConnectionString" connectionString="Data Source={#DatabaseServerName#};Initial Catalog={#DatabaseName#};Integrated Security=True;Encrypt=yes;trustServerCertificate=Yes;" providerName="System.Data.SqlClient" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
  </connectionStrings>
  <appSettings>
    <add key="ActiveEnvironmentName" value="{#ActiveEnvironmentName#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="ChronJobTimerIntervalMilliseconds" value="{#ChronJobTimerIntervalMilliseconds#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--Polling interval for Chron Jobs-->
    <add key="DailyReportBasePath" value="{#DailyReportBasePath#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/>
    <add key="DailyReportHourOfDayToCreateReport" value="{#DailyReportHourOfDayToCreateReport#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/>
    <add key="DailyReportHourOfDayToDistributeReport" value="{#DailyReportHourOfDayToDistributeReport#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/>
    <add key="DailyReportIsEnabled" value="{#DailyReportIsEnabled#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />

    <add key="EmailDistributionListDatabaseUpdateFailure" value="{#EmailDistributionListDatabaseUpdateFailure#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="EmailDistributionListDailyReport" value="{#EmailDistributionListDailyReport#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="EmailDistributionListDataIntegrity" value="{#EmailDistributionListDataIntegrity#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="EmailDistributionListRmqConnectionFailure" value="{#EmailDistributionListRmqConnectionFailure#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="EmailSuppressionTimeSpanHours" value="{#EmailSuppressionTimeSpanHours#}" xdt:Locator="Match(key)" xdt:Transform="SetAttributes" /><!--1 Duplicate emails for the same failure on the same machine and application will not be sent for the same user inside this period-->
    <add key="F277PerformanceAnalysisStudyStartSecond" value="{#F277PerformanceAnalysisStudyStartSecond#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--Second of the day, of 86,400 total seconds, to start evaluating F277 performance-->
    <add key="F277PerformanceAnalysisStudyEndSecond" value="{#F277PerformanceAnalysisStudyEndSecond#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--Second of the day, of 86,400 total seconds, to stop evaluating F277 performance-->
    <add key="F277ProcessorInactivityAlertTimeMinutes" value="{#F277ProcessorInactivityAlertTimeMinutes#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--After this amount of quiescent time, a log entry will be made-->
    <add key="FileOutputJsonEnabled" value="{#FileOutputJsonEnabled#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--Set to true to troubleshoot Json-->
    <add key="FileOutputJsonRootPath" value="{#FileOutputJsonRootPath#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--When enabled above, 277 Json is sent to a file at on this path-->
    <add key="FileOutputJsonSynchronousMetadataUpdatesEnabled" value="{#FileOutputJsonSynchronousMetadataUpdatesEnabled#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="FileOutputJsonAsynchronousMetadataUpdatesEnabled" value="{#FileOutputJsonAsynchronousMetadataUpdatesEnabled#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="FileOutputLegacyEnabled" value="{#FileOutputLegacyEnabled#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="HourOfDayToRunDatabaseLogTruncation" value="{#HourOfDayToRunDatabaseLogTruncation#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--Hour of the day to run DB Log truncation in 24 hour format-->
    <add key="HourOfDayToRunF277PerformanceAnalysis" value="{#HourOfDayToRunF277PerformanceAnalysis#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--The hour of day to run and save F277 performance metrics-->
    <add key="HourOfDayToRunRmqUptimeAnalysis" value="{#HourOfDayToRunRmqUptimeAnalysis#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--Hour of the day to run and save RMQ uptime information in 24 hour format-->
    <add key="MaxDatabaseLogRecordsToDeletePerPoll" value="{#MaxDatabaseLogRecordsToDeletePerPoll#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--The number of database log rows to delete on every polling interval-->
    <add key="MaxInitialRmqConnectionAttemptCount" value="{#MaxInitialRmqConnectionAttemptCount#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--100000--><!--The maximum number of time RMQ will attempt to connect on service startup, before stopping and logging the failure-->
    <add key="NumberOfTimesToRetryDatabaseConnectionInitialization" value="{#NumberOfTimesToRetryDatabaseConnectionInitialization#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--If the database has to reconnect, this is the number of times before it quits-->
    <add key="RmqAutoReconnectFailureEmailAlertTimeSeconds" value="{#RmqAutoReconnectFailureEmailAlertTimeSeconds#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--An email alert will be sent if RMQ cannot reconnect inside this time span-->
    <add key="RmqCertificatePath" value="{#RmqCertificatePath#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="RmqEnqueuementEnabled" value="{#RmqEnqueuementEnabled#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /><!--Set to false to troubleshoot Json output without enqueuing-->
    <add key="RmqPort" value="{#RmqPort#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="RmqPwd" value="{#RmqPwd#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="RmqQueue" value="{#RmqQueue#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="RmqServer" value="{#RmqServer#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="RmqUptimeAnalysisStartSecond1" value="{#RmqUptimeAnalysisStartSecond1#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--Second of the day of 86,400 total seconds, to start evaluating RMQ uptime (Window 1)-->
    <add key="RmqUptimeAnalysisEndSecond1" value="{#RmqUptimeAnalysisEndSecond1#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--Second of the day of 86,400 total seconds, to stop evaluating RMQ uptime (Window 1)-->
    <add key="RmqUptimeAnalysisStartSecond2" value="{#RmqUptimeAnalysisStartSecond2#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--Second of the day, of 86,400 total seconds, to start evaluating RMQ uptime (Window 2)-->
    <add key="RmqUptimeAnalysisEndSecond2" value="{#RmqUptimeAnalysisEndSecond2#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--Second of the day, of 86,400 total seconds, to stop evaluating RMQ uptime (Window 2)-->
    <add key="RmqUser" value="{#RmqUser#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="RmqVirtualHost" value="{#RmqVirtualHost#}"  xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="SendEmailsOnRmqConnectionErrors" value="{#SendEmailsOnRmqConnectionErrors#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--true or false-->
    <add key="SendEmailsOnGeneralErrors" value="{#SendEmailsOnGeneralErrors#}"  xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--true or false--> 
    <add key="SqlReconnectTimePeriodMilliseconds" value="{#SqlReconnectTimePeriodMilliseconds#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--The time delay between SQL Update attempts, after the first attempt failed-->
    <add key="TimeIntervalBetweenDatabaseConnectionAttemptsMilliseconds" value="{#TimeIntervalBetweenDatabaseConnectionAttemptsMilliseconds#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--The time interval between reconnection attempts-->
    <add key="TimeIntervalBetweenInitialRmqConnectionAttemptsMilliseconds" value="{#TimeIntervalBetweenInitialRmqConnectionAttemptsMilliseconds#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--The period of time that the Processor waits to generate the first connection to RMQ-->
    <add key="TimeIntervalForEnqueuing277Milliseconds" value="{#TimeIntervalForEnqueuing277Milliseconds#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--The period of time that the F277 process waits until it starts polling the database and enqueuing-->
    <add key="TruncateDatabaseLogAfterNumberOfDays" value="{#TruncateDatabaseLogAfterNumberOfDays#}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)"/><!--Logging.Log table truncation-->
  </appSettings>
  <log4net>
    <appender name="FileAppender" type="log4net.Appender.RollingFileAppender">
      <threshold value="{#Log4NetFileAppenderThresholdValue#}" xdt:Transform="Replace" /><!-- Off, Fatal, Error, Warn, Info, Debug, All -->
      <file value="{#Log4NetProcessorFileAppenderLogFilePath#}" xdt:Transform="Replace" /><!--C:\\Apps_Logs\\eBilling\\Processor-${COMPUTERNAME}.log-->
      <maxSizeRollBackups value="{#Log4NetMaxSizeRollBackups#}" xdt:Transform="Replace" />
    </appender>
    <appender name="AdoNetAppender" type="log4net.Appender.AdoNetAppender">
      <threshold value="{#Log4NetAdoAppenderThresholdValue#}" xdt:Transform="Replace" />
      <connectionString value="Data Source={#DatabaseServerName#};Initial Catalog={#DatabaseName#};Integrated Security=True;MultipleActiveResultSets=True;" xdt:Transform="Replace" />
      <commandText value="INSERT INTO Logging.Log([ApplicationId],[ThreadId],[ProcessId],[MachineName],[UserName],[EventLevelId],[EventLevel],[Message],[Payload],[DateTimeStamp]) VALUES (2, @thread, 1, '{#MachineName#}', @user, 1, @log_level, @message, @exception, @date)" xdt:Transform="Replace" />
    </appender>
  </log4net>
</configuration>

